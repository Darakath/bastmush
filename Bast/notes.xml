<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Notes"
   author="Bast"
   id="eeec8781c5408278ccda7100"
   language="Lua"
   purpose="a plugin to create notes and do lookups on those notes"
   date_written="2008-10-15 07:35"
   requires="4.30"
   version="2.01"
   >
<description trim="y">
<![CDATA[

]]>
</description>

</plugin>


<!--  Triggers  -->

<triggers>

</triggers>

<!--  Script  -->


<script>
<![CDATA[
internalrevision = "$Rev$"

dofile (GetPluginInfo (GetPluginID (), 20) .. "luapath.lua")

require "var"
require "pluginhelper"
require "ldplugin"
require "tprint"
require "aarddb"

aarddb = Aarddb:new{}

roomnotes = {}

function format_note(tnote)
  local tstr = string.format('---------------------- Note: %d ----------------------', tnote.note_id)
  ColourNote("orange", "", tstr)
  ColourNote("silver", "", string.format('Area     : %s', tnote.area))
  if tnote.room and tnote.room ~= -1 and tnote.room ~= "" then
    ColourNote("silver", "", string.format('Room     : %s', tnote.room))
  end
  ColourNote("silver", "", string.format('Keywords : %s', tnote.keywords))
  ColourNote("silver", "", "----------------------")
  TextToColourTell(tnote.note)
  ColourNote("","","")
  ColourNote("orange", "", string.rep("-", #tstr))
end

function cmd_notelookup(cmddict)
  local stuff = {}
  if cmddict['args'] ~= "" then
    stuff = aarddb:lookupnotes(cmddict['args'])
  else
    stuff = aarddb:getallnotes()
  end

  if next(stuff) then
    for i,v in pairs(stuff) do
      format_note(v)
    end
  else
    ColourNote("orange", "", "Nothing found")
  end
end

function cmd_addnote(cmddict)
  local note = {}
  if not (cmddict[1] and cmddict[2] and cmddict[3] and cmddict[4]) then
    --print('didnt get anything')
    local bareas = aarddb:getallareas()
    local ttable = {}
    for i,v in pairs(bareas) do
      ttable[i] = v.name
    end
    ttable['none'] = '1 - None'
    note['area'] = utils.filterpicker (ttable, 'Pick the area')
    note['keywords'] = utils.inputbox ( 'Add keywords for this note', 'Keywords')
    note['note'] = utils.editbox ( 'Enter the note\nYou can use color codes', 'Note')
    note['room'] = utils.inputbox ( 'Enter the room\nenter "here" for the current room', 'Note')
    if note['room'] == 'here' then
      note['room'] = room.num
    end
  else
    note['area'] = cmddict[1]
    note['keyword'] = cmddict[2]
    note['note'] = cmddict[3]
    note['room'] = cmddict[4]
  end
  if note['area'] and note['keywords'] and note['note'] then
    local rowid = aarddb:addnote(note)
    print('added note', rowid)
    if note['room'] ~= nil and note['room'] ~= -1 and note['room'] ~= "" then
      roomnotes[note['room']] = nil
    end
  else
    print('missing info for the note')
  end
end

function checkroomnotes(room)
  local roomstuff = {}
  if char and char.status and tonumber(char.status.state) == 3 then
    if roomnotes[room] then
      roomstuff = roomnotes[room]
    else
      local stuff = aarddb:lookupnotes('room = ' .. tostring(room))
      if next(stuff) then
        roomnotes[room] = {}
        for i,v in pairs(stuff) do
          roomnotes[room][v.note_id] = v
        end
        roomstuff = roomnotes[room]
      end
    end
    if roomnotes[room] and next(roomnotes[room]) then
      for i,note in pairs(roomnotes[room]) do
        format_note(note)
      end
    end
  end
end

]]>
</script>

<script>
<![CDATA[

function OnPluginBroadcast (msg, id, name, text)
  if id == '3e7dedbe37e44942dd46d264' then
    if text:find("char.status") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","char")
      char = assert (loadstring ('return ' .. gmcparg or ""))()

    elseif text:find("room.info") then
      res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","room.info")
      room = assert (loadstring ('return ' .. gmcparg or ""))()

      checkroomnotes(tonumber(room.num))

    end
  end

  phelper:OnPluginBroadcast(msg, id, name, text)
end

function OnPluginInstall ()
  --OnPluginEnable is automatically called by pluginhelper

  phelper:OnPluginInstall()
end -- OnPluginInstall

function OnPluginClose ()

  phelper:OnPluginClose()
end -- OnPluginClose

function OnPluginEnable ()
  ldplugin ("areaDB")

  phelper:OnPluginEnable()

  if IsConnected() then
    CallPlugin("3e7dedbe37e44942dd46d264","Send_GMCP_Packet","request char")
    CallPlugin("3e7dedbe37e44942dd46d264","Send_GMCP_Packet","request room")
  end

end -- OnPluginEnable

function OnPluginDisable ()

  phelper:OnPluginDisable()
end -- OnPluginDisable

function OnPluginConnect ()

  phelper:OnPluginConnect()
end -- function OnPluginConnect

function OnPluginDisconnect ()

  phelper:OnPluginDisconnect()
end -- function OnPluginConnect

function OnPluginSaveState ()

  phelper:OnPluginSaveState()
end -- function OnPluginSaveState


]]>
</script>

<script>
<![CDATA[

phelper:set_default('cmd', 'bn')
phelper:set_default('plugin_colour', 'orange')

phelper:add_cmd('lu', {func=cmd_notelookup, help="lookup notes"})
phelper:add_cmd('add', {func=cmd_addnote, help="add notes"})

phelper:enable()

]]>
</script>
</muclient>